{
  "personal": {
    "name": "Alae Laaziri",
    "title": "Software Developer | Full Stack Engineer",
    "education": "Computer Science Graduate • University at Buffalo 2025",
    "location": "Yonkers, NY",
    "email": "laazalae5@gmail.com",
    "phone": "646-251-8065",
    "linkedin": "linkedin.com/in/alae-laaziri/",
    "github": "github.com/LaazAlae"
  },
  "about": {
    "description": "I'm a passionate software developer with expertise in building scalable web applications. With a strong foundation in both front-end and back-end technologies, I enjoy creating elegant solutions to complex problems.",
    "secondary": "My journey in tech started when I discovered the power of code to transform ideas into reality. Since then, I've been continuously learning and growing, working on diverse projects that have shaped my skills and perspective."
  },
  "education": {
    "degree": "Bachelor of Science in Computer Science",
    "institution": "University at Buffalo–SUNY",
    "period": "Aug. 2021 – May 2025",
    "location": "Buffalo, NY"
  },
  "experience": [
    {
      "title": "Software & Automation Engineer",
      "company": "United Corporate Services Inc.",
      "period": "Summer 2024, June 2025 – Present",
      "location": "Yonkers, NY",
      "responsibilities": [
        "Engineered company-wide automation solutions using Python (Flask), JavaScript, HTML, and Excel VBA to streamline credit card and check payment processing workflows, reducing manual data entry and improving operational accuracy",
        "Developed the AlaeAutomates platform featuring intelligent PDF tools, including a statement processor for automatic classification of 1000+ page documents and an invoice separator that splits files by detected invoice numbers",
        "Built end-to-end payment automation systems that handle data extraction, form completion, and posting, ensuring data consistency and eliminating repetitive manual work across departments",
        "Contributed to IT team initiatives by designing and deploying a company-wide SharePoint site to enhance collaboration, document accessibility, and internal communication",
        "Created an interactive employee training website prototype with quiz-based modules to streamline onboarding and enhance learning retention",
        "Automated complex Excel-based document workflows, converting multi-day manual processes into automated operations completed within seconds"
      ]
    }
  ],
  "skills": {
    "core_programming": [
      { "name": "Python", "primary": true },
      { "name": "JavaScript", "primary": true },
      { "name": "TypeScript", "primary": true },
      { "name": "Go", "primary": false },
      { "name": "SQL", "primary": false },
      { "name": "Socket.IO", "primary": false }
    ],
    "web_frameworks": [
      { "name": "React", "primary": true },
      { "name": "Node.js", "primary": true },
      { "name": "Flask", "primary": true },
      { "name": "Express.js", "primary": false },
      { "name": "Material-UI", "primary": false },
      { "name": "WebSocket", "primary": false },
      { "name": "PWA", "primary": false }
    ],
    "infrastructure_data": [
      { "name": "MongoDB", "primary": true },
      { "name": "PostgreSQL", "primary": true },
      { "name": "Docker", "primary": true },
      { "name": "Firebase", "primary": false },
      { "name": "Digital Ocean", "primary": false },
      { "name": "Railway", "primary": false },
      { "name": "NFC", "primary": false }
    ],
    "security_systems": [
      { "name": "JWT", "primary": true },
      { "name": "AES-256", "primary": true },
      { "name": "bcrypt", "primary": false },
      { "name": "SSL", "primary": false },
      { "name": "CSRF", "primary": false },
      { "name": "XSS", "primary": false },
      { "name": "Distributed Systems", "primary": true },
      { "name": "Business Automation", "primary": true }
    ]
  },
  "languages": [
    { "name": "Arabic", "level": "Native" },
    { "name": "French", "level": "Native" },
    { "name": "English", "level": "Fluent" }
  ],
  "projects": [
    {
      "title": "AlaeAutomates",
      "shortDescription": "Enterprise-grade PDF processing and financial automation platform serving United Corporate Services with separated architecture.",
      "detailedDescription": "Developed for United Corporate Services across two summers of professional work, this comprehensive business automation platform addresses real-world document processing challenges while evolving through multiple architectural iterations. Beginning with an initial Heroku deployment, the project evolved into a sophisticated separated architecture featuring dedicated Flask API backend and security-enhanced Express.js frontend, demonstrating practical business automation solutions for financial workflows.\n\nArchitectural Evolution Timeline\n• Summer 2024: Initial AlaeAutomates development with basic Flask application and Heroku deployment\n• Summer 2025: Complete platform rebuild with separated architecture and Railway migration\n• Multiple deployments: AlaeAutomates 2.0, dedicated API backend, and modern security-enhanced frontend\n• Professional client deployment serving real business document processing needs at United Corporate Services\n\nAdvanced Backend API Implementation\n• Production Flask application with enterprise logging configuration and comprehensive error handling\n• UUID-based session management with persistent file storage using pickle and fcntl locking\n• Multi-processor architecture supporting concurrent document processing with thread-safe operations\n• SQLite-based company memory management with fuzzy string matching using difflib.SequenceMatcher\n• Advanced PDF processing using PyMuPDF for coordinate-based text extraction and document analysis\n\nComprehensive Security Implementation\n• Express.js frontend with comprehensive security middleware stack including Helmet protection\n• Rate limiting implementation: 1000 requests per 15 minutes general, 100 requests for API endpoints\n• HTTP Parameter Pollution protection against injection attacks with NoSQL injection prevention\n• Content Security Policy implementation with dynamic origin validation for Railway and localhost\n• Input sanitization middleware removing XSS attack vectors with static file protection\n\nCore Business Automation Features\n• Monthly statement processing with advanced PDF text extraction using coordinate-based positioning\n• Intelligent company name matching against DNM lists with fuzzy string matching algorithms\n• Invoice processing with multi-page PDF document analysis, splitting, and automated organization\n• Credit card batch processing with automated generation of integration-ready scripts\n• Excel comparison engine with intelligent month-to-month file comparison and fuzzy matching\n\nProduction Deployment Infrastructure\n• Multiple live Railway platform deployments with automated deployment pipelines\n• Environment variable management for secure configuration with SSL/TLS certificate automation\n• Health check endpoints for monitoring and uptime tracking with comprehensive API documentation\n• RESTful architecture enabling easy third-party integration with modular frontend design\n• Session-based processing with stateful workflow management and cross-origin resource sharing\n\nReal-World Business Impact\n• Production deployment serving actual United Corporate Services document processing workflows\n• Significant reduction in manual document sorting and organization time from days to minutes\n• Improved accuracy through automated company name matching and validation systems\n• Streamlined workflow integration with existing business processes and scalable architecture\n• Enterprise-grade reliability supporting business growth and increased document volume processing",
      "githubUrl": "https://github.com/LaazAlae/AlaeAutomates2.0",
      "deploymentUrl": "https://alaeautomatesbetter.up.railway.app",
      "skills": ["Python", "Flask", "Express.js", "Railway", "PDF Processing", "SQLite", "Security Middleware", "Business Automation", "PyMuPDF", "difflib", "SequenceMatcher", "Helmet", "HPP", "CSRF", "NoSQL injection", "UUID", "pickle", "fcntl"]
    },
    {
      "title": "CampusCaravan",
      "shortDescription": "Production-deployed rideshare platform connecting university students with real-time communication and enterprise-level security.",
      "detailedDescription": "When I noticed university students struggling with expensive transportation between campuses and major cities, I identified a critical gap in cost-effective travel coordination affecting millions of students. This production-deployed platform addresses transportation challenges through a comprehensive solution built entirely from scratch, demonstrating enterprise-level software architecture, advanced security implementations, and real-time communication systems.\n\nCore Technical Architecture\n• **Python 3.11** **Flask** web framework with production **WSGI** server implementation\n• **MongoDB 4.2.5** document database with optimized indexing strategies for complex document relationships\n• **Socket.IO** real-time communication with **Eventlet** async processing enabling instant message broadcasting\n• **Docker** containerization with multi-service orchestration for scalable deployment\n• **Nginx** reverse proxy with **SSL** termination and load balancing configuration\n\nAdvanced Security Implementation\n• **bcrypt** password hashing with 12 salt rounds for maximum security protection\n• **UUID4**-based session token generation with **SHA-256** database storage for authentication\n• **HTTPOnly** secure cookies with configurable expiration policies and automatic session invalidation\n• Sliding window rate limiting with 50 requests per 10-second window and automatic IP blocking\n• **Cross-Site Request Forgery** protection using cryptographically secure **XSRF** token generation\n• **HTML** entity escaping and input validation framework preventing **XSS** attacks\n\nReal-Time Communication Features\n• **WebSocket** connections using **Socket.IO** with fallback transports for reliability\n• Event-driven message broadcasting to all connected clients with connection state management\n• Real-time post updates without page refresh requirements across all user sessions\n• Live interaction synchronization enabling instant likes, comments, and saves\n• Geographic data processing with comprehensive US cities database containing over 19,000 validated locations\n\nProduction Infrastructure Deployment\n• **Digital Ocean** Droplet hosting with **Ubuntu 24.04 LTS**, 2GB RAM, and 1 vCPU configuration\n• **Cloudflare** DNS management with global **CDN** acceleration and **DDoS** protection\n• **SSL/TLS** certificate automation via **Let's Encrypt** with auto-renewal and Perfect Forward Secrecy\n• **HTTP** to **HTTPS** redirect enforcement with **HTTP/2** support achieving **SSL** Labs A+ rating\n• Comprehensive monitoring with error tracking, performance analytics, and automated health checks",
      "githubUrl": "https://github.com/LaazAlae/ShiftSpace",
      "deploymentUrl": "https://friendsgotogether.com",
      "skills": ["Python", "Flask", "MongoDB", "Socket.IO", "Docker", "Digital Ocean", "Nginx", "SSL", "WebSocket", "CSRF", "bcrypt", "Cloudflare", "WSGI", "Eventlet", "UUID4", "SHA-256", "HTTPOnly", "XSS", "XSRF", "HTML", "Ubuntu", "CDN", "DDoS", "HTTP", "HTTPS", "HTTP/2"]
    },
    {
      "title": "ExpenseTracker",
      "shortDescription": "Real-time financial management platform with government-grade security, WebSocket communication, and comprehensive audit trails.",
      "detailedDescription": "Built for enterprise financial management requiring government-level security standards, this comprehensive platform provides secure expense tracking with real-time collaboration capabilities and detailed audit trails for professional financial oversight. Featuring an invite-only user system, AES-256 encryption, and comprehensive threat detection, the platform addresses enterprise requirements for secure financial data management.\n\nAdvanced Security Architecture\n• Invite-only system with no public registration capabilities and JWT-based authentication\n• AES-256-CBC encryption for sensitive financial data with bulletproof cross-platform compatibility\n• Role-based access control distinguishing admin and regular user privileges with account lockout protection\n• Comprehensive threat detection with real-time security event logging and scoring\n• IP-based access tracking with geographic monitoring and automated alert generation\n\nReal-Time Communication System\n• WebSocket-powered real-time data synchronization using Socket.IO across all client sessions\n• User isolation ensuring each user sees only their own financial data with connection resilience\n• Background synchronization preventing data loss during network interruptions\n• Concurrent user management with Map-based socket tracking and administrative monitoring\n• Automatic reconnection handling with queued operations for seamless user experience\n\nEncrypted Database Management\n• JSON-based database with AES-256 encryption for persistent storage and data protection\n• Thread-safe file operations using fcntl locking mechanisms with atomic write operations\n• User data isolation with separate storage namespaces and corrupted data detection\n• Automated recovery procedures with backup rotation and configurable retention policies\n• Data integrity verification using cryptographic hashing algorithms for consistency\n\nBudget Management and Transaction Processing\n• Centralized budget calculations with mutex-like user operation locks preventing conflicts\n• Real-time budget state synchronization across all user sessions with atomic transaction processing\n• Comprehensive transaction tracking with full CRUD capabilities and modification history\n• Smart autocomplete system with localStorage-based option management for user efficiency\n• Bulk operations for BD number assignment and Excel export functionality\n\nProgressive Web Application Features\n• React-based component system with hooks architecture and custom **WebSocket** implementation\n• Service Worker implementation for critical resource caching and offline-first architecture\n• Web App Manifest for native app-like installation experience with automatic cache cleanup\n• Professional modal system for transaction management with real-time editing capabilities\n• Responsive design optimized for desktop and mobile financial workflows with visual indicators\n\nProduction Security and Compliance\n• Government-grade protection with multi-layer authentication and comprehensive token validation\n• Session timeout management with secure cleanup procedures and account lockout policies\n• Geographic monitoring with IP-based access tracking and data encryption key management\n• Professional logging and monitoring with configurable alert thresholds and audit trail preservation\n• 30-day log retention with encrypted storage and integrity verification meeting compliance standards",
      "githubUrl": "https://github.com/LaazAlae/expenseTracker",
      "deploymentUrl": "https://expensetracking.up.railway.app",
      "skills": ["Node.js", "Socket.IO", "AES-256", "JWT", "bcrypt", "Security", "Express", "AES-256-CBC", "Helmet", "React", "WebSocket", "Service Worker", "Web App Manifest", "Excel", "fcntl"]
    },
    {
      "title": "Custom Web Server",
      "shortDescription": "Zero-framework HTTP/1.1 server built from scratch in Python with advanced networking, threading, and WebSocket implementation.",
      "detailedDescription": "Recognizing the need to understand web server fundamentals at the protocol level, I built a complete **HTTP/1.1** server implementation from scratch using pure **Python** without relying on any existing web frameworks. This project demonstrates fundamental understanding of **HTTP** protocols, socket programming, and web server architecture while including a complete chat application with real-time communication capabilities.\n\nCore Server Infrastructure\n• Custom **TCP** socket server using **Python's** **socketserver** module with thread-based request handling\n• Manual **HTTP** request parsing and response generation with custom routing system\n• Raw byte-level data processing and protocol implementation supporting exact and prefix path matching\n• Multi-threaded architecture using **POSIX threads** with custom thread pool management\n• **Berkeley sockets** implementation with non-blocking **I/O** operations for optimal performance\n\nWebSocket Protocol Implementation\n• **RFC 6455** compliant **WebSocket** protocol implementation built from scratch\n• **WebSocket** handshake computation using **SHA-1** and **Base64** encoding with **GUID** concatenation\n• Binary frame parsing supporting all payload lengths: 0-125, 126-65535, and 65536+ bytes\n• Mask bit processing and **XOR** operations for data extraction with continuation frame handling\n• Support for text frames, close frames, and comprehensive connection management\n\nHTTP Server Capabilities\n• Custom Request class parsing headers, body, cookies, and all major **HTTP** methods\n• Router class supporting **GET**, **POST**, **DELETE** methods with dynamic routing capabilities\n• File serving functionality for static content delivery with **Content-Type** detection\n• Large file upload handling with chunked data processing and **Content-Length** validation\n• Proper **HTTP** status code implementation including 200, 302, 403, and 404 responses\n\nSecurity and Authentication Framework\n• Custom credential extraction from **URL-encoded** form data with password complexity validation\n• **bcrypt** hashing with 12 rounds for secure password storage and authentication\n• Session token generation using **UUID4** and **SHA-256** hashing for secure user sessions\n• Custom **HTML** entity escaping implementation for **XSS** prevention and input sanitization\n• **XSRF** token validation for state-changing operations with secure cookie management",
      "githubUrl": null,
      "deploymentUrl": null,
      "skills": ["Python", "HTTP", "WebSocket", "Socket Programming", "Threading", "MongoDB", "bcrypt", "Protocol Implementation", "TCP", "socketserver", "POSIX", "Berkeley sockets", "I/O", "RFC 6455", "SHA-1", "Base64", "GUID", "XOR", "GET", "POST", "DELETE", "Content-Type", "Content-Length", "URL-encoded", "UUID4", "SHA-256", "HTML", "XSS", "XSRF"]
    },
    {
      "title": "Distributed Systems Suite",
      "shortDescription": "Advanced distributed computing framework implementing Raft consensus, distributed hash tables, and fault-tolerant communication.",
      "detailedDescription": "As part of University at Buffalo's advanced distributed systems course CSE 486/586, I implemented a comprehensive suite of fundamental distributed computing algorithms demonstrating mastery of complex distributed computing concepts including parallel processing, fault tolerance, consensus algorithms, and distributed snapshots. Built entirely in **Go** programming language, these implementations showcase advanced understanding of concurrency, distributed coordination, and fault-tolerant system design.\n\nAssignment Series Implementation\n• Assignment 1: Parallel Computing and **MapReduce** Framework with **Go** language fundamentals\n• Assignment 2: **Chandy-Lamport** Distributed Snapshot Algorithm for global state capture\n• Assignment 3: **Raft Consensus** Protocol Leader Election with term-based coordination\n• Assignment 4: **Raft** Log Consensus and Persistence with crash recovery capabilities\n\nMapReduce Framework Architecture\n• Sequential and distributed **MapReduce** implementation with master-worker coordination\n• Custom Map function for document word counting with **JSON** serialization support\n• **RPC**-based distributed communication protocol with dynamic task scheduling\n• Worker failure detection and task reassignment with fault tolerance through redundancy\n• Inverted index generation for document search optimization with concurrent execution\n\nRaft Consensus Protocol Implementation\n• Complete leader election mechanism according to **Raft** specification with **RequestVote** **RPCs**\n• Log replication and consensus agreement with **AppendEntries** **RPC** implementation\n• Persistent state management using **GOB** encoding with crash recovery capabilities\n• Term-based leader election with conflict resolution and vote splitting prevention\n• State machine replication framework with commit index management\n\nChandy-Lamport Snapshot Algorithm\n• Complete implementation of distributed snapshot protocol with token-passing simulation\n• Marker message handling and forwarding with channel state recording\n• Global state reconstruction from distributed snapshots with process state persistence\n• Event-driven simulation framework with concurrent message processing\n• Distributed coordinator synchronization with **FIFO** channel guarantees\n\nAdvanced Technical Features\n• **Goroutine**-based concurrent processing architecture with **channel** communication patterns\n• **Mutex**-based critical section protection with load balancing algorithms\n• Network partition tolerance and recovery with **Byzantine** failure resistance\n• Comprehensive test coverage including fault injection and performance benchmarking\n• Academic compliance with **MIT 6.824** distributed systems curriculum standards",
      "githubUrl": null,
      "deploymentUrl": null,
      "skills": ["Go", "Distributed Systems", "Raft Consensus", "MapReduce", "RPC", "Concurrency", "Fault Tolerance", "Chandy-Lamport", "JSON", "RequestVote", "AppendEntries", "GOB", "FIFO", "Goroutine", "Mutex", "Byzantine"]
    },
    {
      "title": "LaundryMinutes",
      "shortDescription": "Progressive Web Application with NFC integration addressing university dormitory laundry coordination challenges.",
      "detailedDescription": "During my senior year, the apartment complex I lived in had limited laundry facilities serving hundreds of residents with only 2 washers and 2 dryers, I witnessed daily frustrations with machine availability and forgotten loads. This comprehensive dual-platform solution addresses real dormitory challenges through two complementary implementations demonstrating both traditional full-stack development and cutting-edge NFC technology integration.\n\nProduction Platform Architecture\n• Node.js Express server with comprehensive API endpoints and MongoDB persistence\n• Real-time machine state management using WebSocket connections for instant status updates\n• Automated email notification system using Nodemailer with Gmail SMTP integration\n• Progressive Web App implementation with Service Workers for offline functionality\n• Docker containerization enabling consistent deployment across development and production\n\nAdvanced Email Notification System\n• Intelligent notification scheduling with timer conflict resolution and pre-completion warnings\n• HTML email templates with professional styling and delivery confirmation tracking\n• User subscription management with database persistence and one-click unsubscribe\n• Automated cleanup of expired notification timers with comprehensive error handling\n• Email service integration supporting multiple notification types and scheduling\n\nNFC Technology Innovation\n• Web NFC API integration with NDEFReader implementation for NFC tag scanning\n• URL parsing and machine ID extraction from NFC payloads with automatic modal triggering\n• Firebase Realtime Database synchronization for live machine state updates\n• Browser compatibility detection with graceful degradation for unsupported devices\n• Client-side timer management with server synchronization and real-time countdown updates\n\nSecurity and Performance Implementation\n• Advanced rate limiting with sliding window algorithm supporting 50 requests per 10 seconds\n• IP-based request tracking with SHA-256 hashing and automatic blocking mechanisms\n• Comprehensive security headers including CSP, HSTS, and XSS protection\n• Multi-tier caching with static and dynamic cache management for optimal performance\n• Database connection pooling and error recovery with automated health monitoring\n\nReal-World Impact and Deployment\n• Live production deployment at modernlaundry.onrender.com serving actual dormitory users\n• NFC demonstration deployment at laundryminutes.netlify.app showcasing innovative interaction\n• Successfully eliminates time waste from manual machine availability checking\n• Reduces laundry abandonment through proactive notifications and real-time status tracking\n• Scalable architecture supporting multi-building deployment with administrative dashboards",
      "githubUrl": "https://github.com/LaazAlae/modernlaundry",
      "deploymentUrl": "https://modernlaundry.onrender.com",
      "skills": ["Node.js", "Express", "MongoDB", "NFC", "Firebase", "PWA", "Docker", "Email Automation", "Responsive Design", "Mongoose", "Nodemailer", "Gmail SMTP", "Service Workers", "Web NFC API", "NDEFReader", "Firebase Realtime Database", "Netlify", "CDN", "CSP", "HSTS", "XSS"]
    },
    {
      "title": "Naturest",
      "shortDescription": "Agile-developed React social media platform for nature photography with real-time features and team collaboration.",
      "detailedDescription": "Developed for University at Buffalo CSE370 Human-Computer Interaction course, this comprehensive social media platform addresses the need for nature-focused community building through rigorous Agile/Scrum methodology over an entire academic semester. Built by a five-member development team with dedicated project management, the platform demonstrates advanced frontend development capabilities and professional collaborative software engineering practices.\n\nAgile Development Methodology\n• Five-person development team with designated project manager and weekly sprint meetings\n• Sprint-based feature delivery across four distinct development cycles with stakeholder demonstrations\n• Distributed version control using Git with collaborative branching strategies\n• Code review processes ensuring quality and knowledge sharing across team members\n• Daily stand-up meetings with sprint retrospectives for continuous process improvement\n\nModern React Architecture\n• React 18.3+ implementation with functional components and comprehensive React Hooks architecture\n• Material-UI component library integration providing consistent design system\n• Socket.IO integration enabling real-time communication capabilities across the platform\n• TypeScript integration for type-safe development and improved maintainability\n• Over 60 React components demonstrating modular development practices and reusability\n\nAdvanced Social Media Features\n• Comprehensive authentication system with JWT token management and session persistence\n• Image upload and sharing with preview functionality, size validation, and metadata extraction\n• Real-time messaging system with instant delivery, online status indicators, and typing notifications\n• Advanced tagging system with nature-specific categories including Wildlife, Mountains, Forests, and Birds\n• User following/follower relationships with social graph management and discovery features\n\nSpecialized Nature-Focused Implementation\n• Album creation and organization for photo collection management with geographic tagging\n• Location-based content discovery and exploration with geospatial query capabilities\n• Seasonal content organization with curated nature taxonomy and photography techniques\n• Educational content sharing for species identification and photography skill development\n• Environmental awareness integration promoting conservation through community engagement\n\nUser Experience and Performance\n• Responsive design optimization for mobile, tablet, and desktop platforms\n• Intersection Observer API implementation for scroll-based animations and lazy loading\n• Progressive Web App capabilities with Service Worker implementation for offline functionality\n• Performance optimization including code splitting, lazy loading, and asset compression\n• Accessibility standards compliance ensuring inclusive user experience across devices\n\nProduction Deployment and Impact\n• Successfully deployed at webdev.cse.buffalo.edu/hci/teams/fabulous/welcome on university infrastructure\n• Over 15,000 lines of production React and JavaScript code demonstrating technical depth\n• Professional development practices including continuous integration and automated testing\n• Cross-functional team collaboration with UI/UX designers and project management integration\n• Academic demonstration of industry-standard software engineering and human-computer interaction principles",
      "githubUrl": "https://github.com/CSE370HCI/fabulous",
      "deploymentUrl": "https://webdev.cse.buffalo.edu/hci/teams/fabulous/welcome",
      "skills": ["React", "TypeScript", "Socket.IO", "Material-UI", "JavaScript", "Agile", "Team Collaboration", "HCI Design", "React Hooks", "JWT", "localStorage", "sessionStorage", "Intersection Observer API", "Git", "Scrum"]
    },
    {
      "title": "DocFiller",
      "shortDescription": "Cross-platform desktop automation tool for document processing with dynamic form generation and professional formatting.",
      "detailedDescription": "Recognizing the complexity and time-intensive nature of business document processing, I developed an intelligent automation system specifically designed for professional document workflows. Built using **Python** with **Kivy** framework for cross-platform GUI, the application automates the complex process of filling business documents while maintaining professional formatting standards and ensuring data consistency.\n\nCross-Platform Desktop Architecture\n• **Python** **Kivy** framework implementation providing professional cross-platform GUI functionality\n• **PyInstaller** packaging for standalone executable distribution across **Windows**, **macOS**, and **Linux**\n• Professional window sizing with 600x800 dimensions and responsive scroll view implementation\n• Advanced file handling supporting both development and packaged executable modes\n• Comprehensive logging system with structured error tracking and debugging capabilities\n\nAdvanced Document Processing Engine\n• Microsoft Word document manipulation using **python-docx** library with intelligent placeholder replacement\n• Dynamic text formatting with precise font sizing using Pt 14 and professional color management\n• Table generation with exact row height specification of 0.32 inches and cell alignment\n• Dynamic table population with configurable document entries and description management\n• **XML**-level document manipulation for precise table structure control and formatting integrity\n\nProfessional User Interface Design\n• Dynamic dropdown system with intelligent option management and persistent storage capabilities\n• Real-time form validation ensuring all required fields are completed before submission\n• Smart autocomplete functionality remembering previous entries across application sessions\n• Professional visual feedback system with color-coded validation states and heartbeat animations\n• Interactive file selection with drag-and-drop support and comprehensive file type validation\n\nConfiguration Management and Security\n• **JSON**-based options storage with writable path management in user home directory\n• Intelligent default option initialization with business-specific presets and categories\n• Secure admin access control with password protection for dropdown option modification\n• Professional option categories including Names, IDs, Reference Numbers, Tags, and Descriptions\n• Persistent storage ensuring user customizations survive application restarts and updates\n\nDocument Workflow Automation\n• Comprehensive input validation ensuring all required fields are populated before processing\n• Professional document template loading with error recovery and validation capabilities\n• Dynamic content generation based on user selections and business requirements\n• Automated document saving with professional naming conventions and desktop placement\n• Cross-platform document opening capabilities for immediate review and verification\n\nProduction Distribution Features\n• Standalone executable creation requiring no additional software installation\n• Professional error logging with structured debugging information and user guidance\n• Comprehensive file validation preventing common user errors and system conflicts\n• Enterprise-ready deployment with minimal system requirements and dependencies\n• Cross-platform compatibility with intelligent file path handling and platform-specific operations",
      "githubUrl": "https://github.com/LaazAlae/doc-filler",
      "deploymentUrl": null,
      "skills": ["Python", "Kivy", "PyInstaller", "Document Automation", "Cross-platform", "Desktop Application", "python-docx", "JSON", "Windows", "macOS", "Linux", "XML"]
    },
    {
      "title": "Federal Budget Analysis Database System",
      "shortDescription": "Enterprise-grade PostgreSQL database analyzing government spending with advanced indexing, triggers, and real U.S. Treasury data.",
      "detailedDescription": "As part of University at Buffalo CSE 4/560 Database Systems course, our three-person team built a comprehensive relational database solution for analyzing government spending patterns and promoting federal budget transparency. Utilizing real U.S. Treasury datasets spanning five years from 2020-2025, the database facilitates tracking of taxpayer money allocation across agencies, departments, and programs while maintaining strict ACID compliance.\n\nAdvanced Database Architecture\n• PostgreSQL implementation with sophisticated 9-table schema handling over 31,225 records per table\n• Comprehensive referential integrity with CASCADE deletion policies and advanced data normalization\n• Boyce-Codd Normal Form achievement through detailed functional dependency analysis\n• Strategic indexing implementation optimizing query performance by over 90 percent\n• Professional transaction management with budget validation triggers and constraint enforcement\n\nReal-World Government Data Integration\n• U.S. Treasury Daily Treasury Statement processing with 4,492 records spanning fiscal operations\n• Monthly Treasury Statement integration covering 1,371 records of budget allocations\n• Professional data extraction from Opening Balance Today and Current Month Gross Outlay amounts\n• Intelligent parsing of hierarchical government structure using Parent ID classifications\n• Advanced data transformation handling fiscal year boundaries and date normalization\n\nSophisticated Performance Engineering\n• B-tree indexes implementation on critical foreign key relationships for optimal query performance\n• Query execution time reduction from sequential scans to sub-millisecond index scan response\n• PostgreSQL query plan optimization with cost-based analysis and strategic index creation\n• Performance improvement exceeding 90 percent reduction in query latency through indexing\n• Database connection pooling and error recovery with automated backup systems\n\nAdvanced Database Features Implementation\n• Sophisticated trigger system preventing budget overruns with real-time validation during expenditure insertion\n• Automatic logging of attempted budget violations in BudgetOverrunLog table with audit trails\n• Stored procedures for secure vendor management including sp_insert_vendor with parameter handling\n• User-defined functions enabling sophisticated budget versus expenditure analysis by fiscal year\n• Complex JOIN operations across all tables with GROUP BY aggregations and subqueries\n\nProfessional Team Collaboration\n• Three-person specialized development team with clear role distribution and accountability\n• Weekly team coordination meetings ensuring consistent progress and impediment resolution\n• Comprehensive documentation with academic paper format submission and professional presentation\n• Equal contribution model with specialized expertise in schema design, normalization, and query development\n• Database design methodology including E/R diagram development and target user analysis\n\nGovernment Transparency and Analytical Impact\n• Successfully analyzes over 100 billion dollars in federal spending data with comprehensive reporting\n• Cross-agency spending comparison with temporal trend analysis and program effectiveness metrics\n• Vendor transaction tracking enabling procurement transparency and relationship analysis\n• Real-time spending monitoring with threshold-based alerting and historical trend analysis\n• Academic compliance with graduate-level documentation meeting database systems curriculum standards",
      "githubUrl": null,
      "deploymentUrl": null,
      "skills": ["PostgreSQL", "Database Design", "Performance Optimization", "Government Data", "SQL", "Academic Collaboration", "BCNF", "Indexing", "B-tree", "CASCADE", "ACID", "triggers", "stored procedures", "user-defined functions", "JOIN", "GROUP BY", "subqueries"]
    }
  ]
}